<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>AMPLink Control Panel</title>
<link href="/style.css" rel="stylesheet" type="text/css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min/vs/editor/editor.main.min.css">

<script>var require = { paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs' } }</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/loader.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/editor/editor.main.nls.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/editor/editor.main.js"></script>
</script>

<style>
    #editor { 
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 10;
    }
    .parent {
    width:100%;
    height: 400px;
    display:inline-block;
    position:relative;
}

</style>
</head>
<body>

<div class="sidenav">
  <img src="/resources/images/branding.png" alt="branding" width="200" height="80">
  <a href="/">Home</a>
  <a href="/panel">Server Control Panel&nbsp;</a>
  <a href="/console">Server Console</a>
  <a href="/players">Chat/Players</a>
  <a href="/grids">Grids/Entities</a>
  <a href="/users">Users</a>
  <a href="/about">About</a>
  <div class="brightercolor"><a href="#">Welcome, <b>{{#if message }}{{message}}{{/if}}</b><br><form action="/logout"><input type="submit" value="Logout" class="btn btn-danger"></form></a></div>
</div>
<main>

<div class="content">
  <h2>Plugins Management</h2>
  <p class="subtitle2"><a href="/panel">Server Control Panel</a> > Plugins Management</p>
<iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>


<div class="row">



&nbsp;&nbsp;&nbsp;
<div class="col-xl-11 callout-warning">
  <b>Warning: Changing any configuration string could break the torch instance, or make AMPLink inaccessible.</b>
</div>
<noscript>
  <div class="col-xl-11 callout-danger"><b>JavaScript needs to be enabled to display this section properly. Please either reload the page, or enable JavaScript in your browser settings.</b></div>
</noscript>

<h3></h3>
&nbsp;&nbsp;&nbsp;
<div class="col-xl-5 callout-info"><strong>Installed Plugins</strong><br>Filters <i class="bi bi-funnel-fill"></i> | <button class="btn btn-hidden" onclick="sortTable()">Sort by Name <i class="bi bi-sort-alpha-down"></i></button></strong>
<hr>
<span id="getAllPlugins">Please wait, retrieving info...</span>
</div>

<script>
var sortOrder = "asc";
function sortTable() {
  var table, rows, switching, i, x, y, shouldSwitch;
  table = document.getElementById("myTable");
  switching = true;
  while (switching) {
    switching = false;
    rows = table.rows;
    for (i = 1; i < (rows.length - 2); i++) {
      shouldSwitch = false;
      x = rows[i].getElementsByTagName("TD")[0];
      y = rows[i + 1].getElementsByTagName("TD")[0];
      if (sortOrder === "asc") {
        console.log("asc")
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          shouldSwitch = true;
          break;
        }
      } else {
        console.log("desc")
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
    }
  }
  // Reverse the sort order for the next click
  sortOrder = (sortOrder === "asc") ? "desc" : "asc";
}
</script>

<div class="col-xl-1"></div>
<div class="col-xl-5 callout-info"><strong>Install / Remove Plugins</strong><hr>
<div class="mb-3">


<form id="fileUploadForm" action="/uploadplugin" method="POST" enctype="multipart/form-data" style="float:left; margin-right: 10px;">
    <label id="file" for="formFile" class="form-label">Upload a plugin to server:</label>
    <input type="file" name="formFile" class="form-control" accept=".zip" id="formFile" required>
    <input type="submit" style="margin-top:10px;" value="Upload Plugin" class="btn btn-success" onclick="return confirm('Are you sure you want to upload this plugin?');">
</form><br><br>

<form id="fileDeleleForm" action="/deleteplugin" method="POST" style="margin-right: 10px;">
    <label id="delf" for="delID" class="form-label">Enter GUID of plugin to remove:</label>
    <input type="text" name="delID" class="form-control" id="delID" required>
    <button type="submit" style="margin-top:10px;" value="Remove Plugin" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this plugin? This action cannot be undone!');">Delete Plugin</button>
</form>

<form action="/configurator/plugins" method="GET"><br>
<label class="form-label">Search plugins from torchapi.com:</label>
<br><input type="submit" value="Plugin Search" class="btn btn-secondary">
</form><br><br>

<div style="background-color: rgba(0,0,0,0.1); border-radius:5px; padding:5px; float:left; width:100%"><pre>Output:<br>{{output}}</pre></div>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script>
    $(document).ready(function() {
      $('#fileUploadForm').submit(function(e) {
        e.preventDefault();
        var formData = new FormData($(this)[0]);

        $.ajax({
          url: '/configurator/plugin/upload',
          type: 'POST',
          data: formData,
          async: true,
          cache: false,
          contentType: false,
          processData: false,
          success: function(response) {
            console.log(response);
          },
          error: function(error) {
            console.error(error);
          }
        });
      });
    });
  </script>



</div>
<script>
  const updateVariable2 = () => {
    fetch('/configurator/installedplugins')
      .then((response) => response.text())
      
      .then((result) => {
        //JSON.parse(result)
        document.getElementById('getAllPlugins').innerHTML = result;
      });
      
  };

  updateVariable2();
</script>

</div>
</div>


<div class="row">
<h3>Server Management</h3>

&nbsp;&nbsp;&nbsp;
<div class="callout-info col-xl-11">

  
  <p><strong>Plugin Configuration</strong><hr></p>
  
  <!--<form action="/configurator/plugins/get/{{this}}/display" method="POST">-->
  <div class="form-group">
<dummy style="display: none;" id="pluginData">{{result2}}</dummy>  
<select id="myDropdown">
</select>

  <!--</form>-->
  </div>

  <label for="textarea">Configuration Text Area:</label><br>
  <!-- ### Ace Editor ### -->
<form action="/configurator/plugins/get/submit" method="POST">
<div class="parent">
  <div id="editor" ></div>
  <input type="hidden" name="torchConfig" id="torchConfig">
  <h1><br><br><br><br><br><br><br><br></h1>
  <input type="submit" style="margin-top:10px;" value="Save and Apply Changes" class="btn btn-success"  onclick="updateStaticData() ">
  <input type="reset" style="margin-top:10px;" value="Revert Changes" class="btn btn-warning" onclick="staticData2()">
</div>


<script>
    // require is provided by loader.min.js.
  var editor = monaco.editor.create(document.getElementById('editor'), {
    value: `[{"error": "[AMPLink] No configuration group selected. Select a configuration group to load the plugin's respective configuration(s)"}]`,
    language: 'json',
    theme: 'vs-dark',
    wordWrap: true
  });
  const editorContent = editor.getValue();
async function staticData2() {
  
  await fetch('/configurator/plugins/get/display')
    .then((response) => response.text())
    
    .then((result) => {
      editor.setValue(JSON.stringify(JSON.parse(result), null, 2));
    });
  };
  setTimeout(staticData2(), 1000);
 
  
  function updateStaticData() {
    confirm('Are you sure you want to upload changes to the plugin?');
    var editor = editor.getValue()
    var elem = document.getElementById('editor').value = editor;
    console.log(elem)
  }


  document.addEventListener('DOMContentLoaded', function () {
    // Assuming result2 is a global variable set by Handlebars
    var myArray = document.getElementById("pluginData").innerText;
    console.log(myArray)
    myArray = JSON.parse(myArray);
    // Get the select element
    const dropdown = document.getElementById('myDropdown');

    // Function to handle the onchange event
    async function handleDropdownChange() {
      const selectedValue = dropdown.value;
      
      // Make a POST request using the fetch API
      const response = fetch(`/configurator/plugins/get/${selectedValue}/post`, {
        method: 'POST'
      });
      console.log("done")
      // Parse the response JSON

      // Get a reference to the result <div>
      const resultDiv = document.querySelector('editor2');
      
      // Update the result <div> with the parsed JSON response
      //resultDiv.innerHTML = editor.setValue("Please wait, retrieving info...");
      console.log("do the 2")
      resultDiv.innerHTML = setTimeout(staticData2, 3000);

      // You can replace the alert with any action you want to perform based on the selected value.
    }

    // Iterate through the array and add options to the dropdown
    myArray.forEach(optionValue => {
      const option = document.createElement('option');
      option.value = optionValue;
      option.textContent = optionValue;
      dropdown.appendChild(option);
    });

    // Add the onchange event listener to the dropdown
    dropdown.addEventListener('change', handleDropdownChange);
  });
  
</script>
  </div>
  {{sessionMsg}}
  
</div>
</div>
</div>

</div>
</div>


</main>
</body>
</html>