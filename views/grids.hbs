<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>AMPLink Control Panel</title>
<link href="/style.css" rel="stylesheet" type="text/css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
<style>
        /* styles.css */
        .selectable {
            border: 1px dotted #000;
            padding: 10px;
            margin: 5px;
            cursor: pointer;
        }
        .selected {
            background-color: #007bff;
            color: #fff;
        }
  </style>
</head>
<body>

<div class="sidenav">
  <img src="/resources/images/branding.png" alt="branding" width="200" height="80">
  <a href="/">Home</a>
  <a href="/panel">Server Control Panel&nbsp;</a>
  <a href="/console">Server Console</a>
  <a href="/players">Chat/Players</a>
  <a href="/grids">Grids/Entities</a>
  <a href="/users">Users</a>
  <a href="/about">About</a>
  <div class="brightercolor"><a href="#">Welcome, <b>{{#if message }}{{message}}{{/if}}</b><br><form action="/logout"><input type="submit" value="Logout" class="btn btn-danger"></form></a></div>
</div>
<main class="content">
<div class="row">
<div class="col-xl-11">
  <div></div>
  <h2>Grids/Entities&nbsp;</h2>
  <noscript><div class="col-xl-12 callout-danger"><b>JavaScript needs to be enabled to display this section properly. Please either reload the page, or enable JavaScript in your browser settings.</b></div></noscript>
  <p><div class="callout-info">Grid Data gets queried every {{#if usingvrage}}<b>2</b>{{else}}<b>10</b>{{/if}} seconds.</div></p>
  <p><div class="callout-success">Currently connected to: {{#if usingvrage}}<b>VRage Remote API</b>{{else}}<b>Torch Remote API</b>{{/if}}.</div></p>
</div><br>

<script>
  // Function to sort the table rows based on input value
    function search() {
      const input = document.getElementById("myInput").value.toUpperCase();
      const blockCount = document.getElementById('myTable').getElementsByTagName('tr');
      const rows = Array.from(blockCount).slice(1);

      rows.forEach(row => {
        const nameValue = row.cells[1].innerText.toUpperCase();
        const blockCountValue = row.cells[2].innerText;
        if (nameValue.indexOf(input) > -1 || blockCountValue.indexOf(input) > -1) {
          row.style.display = "";
        } else {
          row.style.display = "none";
        }
      });
    }

    function sortBySelected() {
      const input = document.getElementById("myInput").value.toUpperCase();
      const blockCount = document.getElementById('myTable').getElementsByTagName('tr');
      const rows = Array.from(blockCount).slice(1);

      rows.forEach(row => {
        const isSelected = row.cells[0].innerText.toUpperCase();
        if (nameValue.classList.contains("bg-primary")) {
          row.style.display = "";
        } else {
          row.style.display = "none";
        }
      });
    }
</script>

<div class="col-xl-9">
  <div class="callout-info">
    <span class="text-adaptive"> <strong>Entity List</strong><br>Filters <i class="text-adaptive bi bi-funnel-fill"></i> | <input type="text" class="col-md-5" id="myInput" placeholder="Search..." name="myInput" oninput="myFunction()"> <button class="btn btn-hidden" onclick="sortTable()">Sort by Selected <i class="bi bi-sort-alpha-down"></i></button></span>
    <hr>
    <div id="gridlist">Please wait, retrieving info...</div>
  </div>
</div>

<div class="col-xl-2">
  <div class="callout-info">
    <strong>Bulk Delete</strong>
    <hr>
    <div>
      <button id="addToSelection" style="padding: 0px;" class="btn btn-primary text-white" >Add to Selection</button>
      <form action="/grids/cleanup/blocks" method="POST"><button style="padding: 0px;" type="submit" value="Clean Grid Debris" value="Clean Grid Debris" class="btn btn-warning text-white" onclick="return confirm('Are you sure you want to Clean Grid Debris?');">Clean Grid Debris</button></form>

      <form action="/grids/cleanup/floating" method="POST"><button style="padding: 0px;" type="submit" value="Clean Floating Objects" value="Clean Floating Objects" class="btn btn-warning text-white" onclick="return confirm('Are you sure you want to Clean Floating Objects?');">Clean Floating Objects</button></form>
      
      <form action="/grids/cleanup/unowned" method="POST"> <button style="padding: 0px;" type="submit" value="Clean Unowned Grids" value="Clean Unowned Grids" class="btn btn-warning text-white" onclick="return confirm('Are you sure you want to Clean Unowned Grids?');">Clean Unowned Grids</button></form>



      <form action="/grids/cleanup/voxels/planets" method="POST"><button style="padding: 0px;" type="submit" value="Reset Planet Voxels" value="Reset Planet Voxels" class="btn btn-danger text-white" onclick="return confirm('Are you sure you want to Reset Planet Voxels?');">Reset Planet Voxels</button></form>

      <form action="/grids/cleanup/voxels" method="POST"><button style="padding: 0px;" type="submit" value="Reset All Voxels" value="Reset All Voxels" class="btn btn-danger text-white" onclick="return confirm('Are you sure you want to Reset All Voxels?');">Reset All Voxels</button><br><br></form>

    </div>
  </div>
</div>

</div>

<script>
      var container = document.getElementById('gridlist'); // Use the container containing selectable items
      var addToSelectionButton = document.getElementById('addToSelection');
      var selectAllButton = document.getElementById('selectAll');
  
      var selectedItems = []; // Array to store selected items' text

      // Function to save selected items to Local Storage
      function saveSelectedItemsToLocalStorage() {
          localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
      }

      // Function to load selected items from Local Storage
      function loadSelectedItemsFromLocalStorage() {
          const storedItems = localStorage.getItem('selectedItems');
          if (storedItems) {
              selectedItems = JSON.parse(storedItems);
              // Mark the previously selected items as selected
              Array.from(container.getElementsByClassName('selectable')).forEach(item => {
                  if (selectedItems.includes(item.textContent)) {
                      item.classList.add('selected');
                      item.classList.toggle("bg-primary"); 
                  }
              });
          }
      }

      // Function to toggle the selection and update the selected items array
      function toggleSelection(item) {
          if (item.classList.contains('selected')) {
              selectedItems = selectedItems.filter(text => text !== item.textContent);
              console.log("Selected")
            item.style.cssText += 'background-color: none;';
            //item.textContent.replace = 'X';
              item.classList.toggle("bg-primary") //Enabled Action
              
          } else {
              selectedItems.push(item.textContent);
          }
          saveSelectedItemsToLocalStorage();
          //item.classList.toggle('selected');
      }
      function selectAll() {
      var container = document.getElementById('gridlist'); // Use the container containing selectable items
      var selectableItems = Array.from(container.getElementsByClassName('selectable'));


        console.log("Selected All")
        selectableItems.forEach(item => {
          item.classList.add('selected');
      });
      }
      // Event delegation for clicking on selectable items
      container.addEventListener('click', function (event) {
          const target = event.target;
          if (target.classList.contains('selectable')) {
              toggleSelection(target);
          }
      });

      addToSelectionButton.addEventListener('click', () => {
          // Clear the selected items
          selectedItems.length = 0;
          Array.from(container.getElementsByClassName('selectable')).forEach(item => {
              if (item.classList.contains('selected')) {
                  //item.classList.toggle("bg-primary"); //Enabled Action
                  selectedItems.push(item.textContent);
              }
          });

          // Display the selected items in the console (you can modify this part)
          console.log('Selected items:', selectedItems);
          // Make a POST request to the server with the selected items
          fetch('/process-selected-items', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({ selectedItems }),
          })
          .then(response => response.json())
          .then(data => {
              console.log(data.message);
          })
          .catch(error => {
              console.error('Error:', error);
          });
      });
      
    
{{#if usingvrage}}
  const updateVariable = () => {
    fetch('/grids/gridlist')
  .then(response => response.text())
  .then(html => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const scriptTag = doc.querySelector('script');
    const scriptContent = scriptTag.textContent;
    const targetElement = document.getElementById('gridlist');
    targetElement.innerHTML = html;
    // execute the script content if necessary
    eval(scriptContent);
    search()
    loadSelectedItemsFromLocalStorage() 
    
  });
  };
setInterval(updateVariable, 2000);

{{else}}
  const updateVariable = () => {
    fetch('/grids/gridlist')
  .then(response => response.text())
  .then(html => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const scriptTag = doc.querySelector('script');
    const scriptContent = scriptTag.textContent;
    const targetElement = document.getElementById('gridlist');
    targetElement.innerHTML = html;
    // execute the script content if necessary
    eval(scriptContent);
    search()
    loadSelectedItemsFromLocalStorage() 
    
  });
  };
setInterval(updateVariable, 10W000);
{{/if}}
</script>

</main>
</body>
</html>